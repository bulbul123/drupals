<?php 
// $Id: node_embed.module,v 1.6 2011/02/07 17:03:47 jec006 Exp $

/**
 * This module defines an input filter for taking an embed code syntax ([[nid: ###]])
 * and removing the embed code and replacing with a rendered node view at that position
 * in the text field. *
 */

/**
 * Implementation of hook_filter_info()
 */
function node_embed_filter_info() {
  
  $filters['node_embed'] = array(
    'title' => t('Insert node'),
    'description' => t('By including the syntax [[nid:(node_id)]], this filter will embed the node with given NID'),
    'prepare callback' => 'node_embed_filter_node_embed_prepare',
    'process callback' => 'node_embed_filter_node_embed_process',
    'tips callback'  => 'node_embed_filter_node_embed_tips',
    'cache' => FALSE,
  );
  
  return $filters;
}

/**
 * Prepare callback for hook_filter
 */
function node_embed_filter_node_embed_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {

  return $text;
}

/**
 * Process callback for hook_filter
 */
function node_embed_filter_node_embed_process($text, $filter, $format, $langcode, $cache, $cache_id) {

  return preg_replace_callback('/\[\[nid:(\d+)\]\]/', '_node_make_replacements', $text);
}

/**
 * Tips callback for hook_filter
 */
function node_embed_filter_node_embed_tips($filter, $format, $long) {
  
  return t('[[nid:123]] - Insert a node content');
}

  
/**
 * Provides the replacement html to be rendered in place of the embed code.
 * Does not handle nested embeds.
 *
 * @param $matches
 *    numeric node id that has been captured by preg_replace_callback
 * @return
 *    The rendered HTML replacing the embed code
 */ 
function _node_make_replacements($matches) {
  
    $node = node_load($matches[1]);
    
    if($node == FALSE || !node_access('view', $node) || !$node->status) {
      
      return "[[nid:{$matches[1]}]]";
    }
    else {
      
      $node->node_embedded = TRUE;
      $view = node_view($node, 'full_teaser', NULL); // (mode 'full' doesn't work)
      $render = drupal_render($view);
      
      return $render;
    }
   
}


/**
 * Implements hook_theme_registry_alter()
 * This is where we add our default template for the fckeditor view page template.
 */
function node_embed_theme_registry_alter(&$theme_registry) {
  
  //Add 'html--ckeditor-node-embed.tpl.php' template file
  $theme_registry['html__ckeditor_node_embed'] = Array();
  $theme_registry['html__ckeditor_node_embed']['template'] = 'html--ckeditor-node-embed';
  $theme_registry['html__ckeditor_node_embed']['path'] = drupal_get_path('module', 'node_embed') . "/theme";
  $theme_registry['html__ckeditor_node_embed']['render element'] = 'page';
  $theme_registry['html__ckeditor_node_embed']['base hook'] = 'html';
  $theme_registry['html__ckeditor_node_embed']['type'] = 'theme_engine';
  $theme_registry['html__ckeditor_node_embed']['theme path'] = path_to_theme();
  $theme_registry['html__ckeditor_node_embed']['preprocess functions'] = Array();
  $theme_registry['html__ckeditor_node_embed']['process functions'] = Array();
  
  //Add 'page--ckeditor-node-embed.tpl.php' template file
  $theme_registry['page__ckeditor_node_embed'] = Array();
  $theme_registry['page__ckeditor_node_embed']['template'] = 'page--ckeditor-node-embed';
  $theme_registry['page__ckeditor_node_embed']['path'] = drupal_get_path('module', 'node_embed') . "/theme";
  $theme_registry['page__ckeditor_node_embed']['render element'] = 'page';
  $theme_registry['page__ckeditor_node_embed']['base hook'] = 'page';
  $theme_registry['page__ckeditor_node_embed']['type'] = 'theme_engine';
  $theme_registry['page__ckeditor_node_embed']['theme path'] = path_to_theme();
  $theme_registry['page__ckeditor_node_embed']['preprocess functions'] = Array();
  $theme_registry['page__ckeditor_node_embed']['process functions'] = Array();
  
}

/**
 * Make compatible with views 2 for default view.
 */
function node_embed_views_api() {
  return array('api' => 2.0);
}
  
/**
 * Implementation of hook_views_default_views().
 */
function node_embed_views_default_views() {
  
  $views = array();
  
  if (module_exists('ckeditor') || module_exists('wysiwyg')) {
    $pathCK = drupal_get_path('module', "node_embed") ."/ckeditor/ckeditor_node_embed.view.inc";
    include_once($pathCK);
    $views[$view->name] = $view;
  }
  
  return $views;
}

/**
 * Implement hook_form_alter()
 * add a validation handler to nodes with node_embed.
 */
function node_embed_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'node_embed_validate';
}

/**
 * validation for the node_embed filter.
 * we do not allow nodes to embed in themselves.
 * results in segment fault.
 */
function node_embed_validate($node, $form) {
  
  if (isset($form['values']['nid'])) {
    
    $nid = $form['values']['nid'];
    
    $needle = "[[nid:{$nid}]]";
    
    
    $num = 0;
    
    while (isset($form['values']['body'][$form['values']['language']][$num])) {

      $found = strpos($form['values']['body'][$form['values']['language']][$num]['value'], $needle);
  
      if ($found == TRUE) {
        form_set_error('edit-body', t('A node is not allowed to embed in itself.'));
      }
      
      $num++;
    }
    
  }
  
}

/**
* Implementing the Wysiwyg API
 * Register a directory containing Wysiwyg plugins.
 *
 * @param $type
 *   The type of objects being collected: either 'plugins' or 'editors'.
 * @return
 *   A sub-directory of the implementing module that contains the corresponding
 *   plugin files. This directory must only contain integration files for
 *   Wysiwyg module.
 */
function node_embed_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      // You can just return $type, if you place your Wysiwyg plugins into a
      // sub-directory named 'plugins'.
      return $type;
  }
}

/*
 *  Implementation of hook_init - attach the needed css files if we're on a form page
 */
function node_embed_init () {
	drupal_add_css(drupal_get_path('module', 'node_embed') . '/plugins/node_embed/node_embed.css');	
}

<?php
/**
 * Implements hook_menu
 */
function toolkits_pages_menu() {
  $items['toolkits/%/about'] = array(
    'page callback' => 'toolkits_pages_about',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['toolkits/%/resources'] = array(
    'title' => 'All Resources',
    'page callback' => 'toolkits_pages_resources',
    'page arguments' => array('page'),
    'access arguments' => array('access content'),
  );

  $items['toolkits/%/resources/manage'] = array(
    'title' => 'Manage Resources',
    'page callback' => 'toolkits_pages_resources',
    'page arguments' => array('page_1'),
    'access arguments' => array('access content'),
  );

  $items['toolkits/%/sitemap'] = array(
    'title' => 'Toolkit Sitemap',
    'page callback' => 'toolkits_pages_sitemap',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['toolkits/%/feed'] = array(
    'title' => 'Toolkit RSS',
    'page callback' => 'toolkits_pages_rss',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_page_alter
 *
 * Update the breadcrumb for certain pages
 */
function toolkits_pages_page_alter(&$page) {
  if (arg(0) == 'toolkits') {
    switch (arg(1)) {
      // topics/resources pages
      case 'topics':
      case 'resources':
        $breadcrumb = drupal_get_breadcrumb();
        $breadcrumb[1] = l('Toolkits', 'toolkits');
        drupal_set_breadcrumb($breadcrumb);
        break;
    }
  }
  // check if this is an admin page
  elseif (arg(0) == 'admin'){
    if (arg(1) == 'content' && arg(2) == 'book') {
      if (isset($page['footer'])) {
        // non-admin view
        $breadcrumb = drupal_set_breadcrumb();
        $breadcrumb[] = l('Home', '');
        $breadcrumb[] = l('Toolkits', 'toolkits');
        $breadcrumb[] = l($page['content']['system_main']['content']['#node']->title, 'node/'. $page['content']['system_main']['content']['#node']->nid);
        drupal_set_breadcrumb($breadcrumb);
        drupal_set_title('Manage Structure');
        return;
      }
    }
  }
  elseif (arg(0) == 'node' && arg(1) == 'add' && in_array(arg(2), array('toolkit-resource', 'toolkit-page', 'toolkit'))) {
    $og_context = og_context();
    if ($og_context) {
      $node = node_load($og_context->etid);
      $original_breadcrumb = drupal_get_breadcrumb();
      $breadcrumb = array();
      $breadcrumb[0] = $original_breadcrumb[0];
      $breadcrumb[1] = l($node->title, 'node/' . $og_context->etid);
      $breadcrumb[2] = $original_breadcrumb[1];
      drupal_set_breadcrumb($breadcrumb);
    }
  }
  else {
    // check if this is the group page for the node
    $arg = arg();
    if (count($arg) > 1 && (array_pop($arg) == 'group' || $arg[0] == 'group')) {
      $original_breadcrumb = drupal_get_breadcrumb();
      $breadcrumb = array();
      $breadcrumb[] = $original_breadcrumb[0];
      // Only replace the home breadcrumb link if toolkits_theme module is being used
      // (which indicates that we're on an installation other than K4Health)
      if (module_exists('toolkits_theme')) {
        $breadcrumb[] = l('Toolkits', 'toolkits');
      }
      $breadcrumb[] = $original_breadcrumb[1];
      drupal_set_breadcrumb($breadcrumb);
      drupal_set_title('Collaborate');
    }
    // check if this is a resource page
    elseif (isset($page['content']['system_main']['content']['nodes']) || isset($page['content']['system_main']['nodes'])) {
      $nodes = (isset($page['content']['system_main']['content']['nodes'])) ? $page['content']['system_main']['content']['nodes'] : $page['content']['system_main']['nodes'];
      $node_render = reset($nodes);
      $node = $node_render['#node'];
      if ($node->type == 'toolkit_resource') {

        $breadcrumb = drupal_get_breadcrumb();
        // Only replace breadcrumb link with Toolkits if toolkits_theme module is being used
        if (module_exists('toolkits_theme')) {
          $breadcrumb[1] = l('Toolkits', 'toolkits');
        }
        if (in_array($node->type, array('toolkit_resource', 'toolkit_page'))) {
          $og_context = og_context();
          $node = node_load($og_context->etid);
          $breadcrumb[2] = l($node->title, 'node/'. $og_context->etid);
        }
        drupal_set_breadcrumb($breadcrumb);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function toolkits_pages_form_alter(&$form, &$form_state, $form_id) {

  global $toolkits_original_q;

  if (
    ($form_id == 'apachesolr_search_custom_page_search_form') &&
    (arg(1, $_SERVER['REQUEST_URI']) == 'search') &&
    (arg(2, $_SERVER['REQUEST_URI']) == 'toolkit')
  ) {

    $node_path = drupal_lookup_path('source', 'toolkits/'. arg(3, $_SERVER['REQUEST_URI']));
    $node = menu_get_object('node', 1, $node_path);
    if ($node) {
      if (!isset($toolkits_original_q)) {
        $toolkits_original_q = $_GET['q'];
      } // if
      $_GET['q'] = $node_path;
    } // if

  } // if

  if ($form_id == 'toolkit_page_node_form') {
    // Recreate the book options so we can put none on top
    $options = array();
    $options[0] = '<' . t('none') . '>';
    foreach ($form['book']['bid']['#options'] as $k => $v) {
      $options[$k] = $v;
    }
    $form['book']['bid']['#options'] = $options;

    // Add a submit function to process removing from book when 'none' is selected
    //dpr($form);
    $form['#submit'][] = '_toolkits_pages_check_book';
  }
} // toolkits_pages_form_alter

/**
 * About page
 */
function toolkits_pages_about() {
  // load our toolkit
  $node = _toolkits_pages_get_node();

  // set the title
  drupal_set_title('About');

  // update the breadcrumb
  $breadcrumb = _toolkits_pages_get_breadcrumb($node);
  drupal_set_breadcrumb($breadcrumb);

  $field = field_view_field('node', $node, 'field_about');
  $field['#label_display'] = 'hidden';

  return $field;
}

/**
 * All resources page
 */
function toolkits_pages_resources($display = 'page') {
  // load our toolkit
  $node = _toolkits_pages_get_node();

  // set the title
  drupal_set_title('All Resources');

  // update the breadcrumb
  $breadcrumb = _toolkits_pages_get_breadcrumb($node);
  drupal_set_breadcrumb($breadcrumb);

  // get the resources for the toolkit
  module_load_include('inc', 'og_blocks', 'og_blocks.api');

  // first we need the group id
  $group = _toolkits_pages_get_group($node);

  $resources = og_blocks_get_group_members_by_content_type($group['gid'], 'toolkit_resource');
  // In case there are no resources, return a message to avoid a blank screen
  if ($resources->rowCount() === 0) {
    return t('There are no resources in this toolkit.');
  }
  $items = array();
  foreach ($resources as $node) {
    $items[] = $node->nid;
  }
  $arguments = array(implode('+', $items));

  // return views_embed_view('all_toolkit_resources', 'page', $resources);
  $view = views_get_view('all_toolkit_resources');
  $view->init();
  $view->set_display($display);
  $view->set_arguments($arguments);
  $view->set_use_ajax(TRUE);
  $view->pre_execute();
  $view->execute();

  return $view->render();
}

/**
 * RSS feed for toolkits
 */
function toolkits_pages_rss() {
  // load our toolkit
  $node = _toolkits_pages_get_node();

  // get the resources for the toolkit
  module_load_include('inc', 'og_blocks', 'og_blocks.api');

  // first we need the group id
  $group = _toolkits_pages_get_group($node);

  $resources = og_blocks_get_group_members_by_content_type($group['gid'], 'toolkit_resource');
  $items = array();
  foreach ($resources as $node) {
    $items[] = $node->nid;
  }
  $view = views_get_view('whats_new_toolkit_resources_');
  $view->init();
  $view->set_display('feed_1');
  $view->set_arguments($items);
  header('Content-Type: application/rss+xml');
  print $view->render();
  exit;
}

/**
 * Sitemap page
 */
function toolkits_pages_sitemap() {
  // load our toolkit
  $node = _toolkits_pages_get_node();

  // set the title
  drupal_set_title('Toolkit Sitemap');

  // update the breadcrumb
  $breadcrumb = _toolkits_pages_get_breadcrumb($node);
  drupal_set_breadcrumb($breadcrumb);

  // this can use code to get the TOC
  // dpm(book_menu_subtree_data($node->book));
/*
  $view = views_get_view('toolkit_pages');
  $view->init();
  $view->set_display('block');
  $view->set_arguments($node->book->bid);

  // return array('#markup' => '...',);
  return $view->render();
*/
  $output = drupal_render(menu_tree_output(menu_tree_all_data('book-toc-' . $node->nid)));
  return $output;
}

/**
 * Get the breadcrumb for this page
 */
function _toolkits_pages_get_breadcrumb($node) {
  $breadcrumb = drupal_get_breadcrumb();
  // array_push($breadcrumb, '<a href="/toolkits">Toolkits</a>');
  array_push($breadcrumb, l('Toolkits', 'toolkits'));
  array_push($breadcrumb, l($node->title, arg(0) .'/'. arg(1)));
  return $breadcrumb;
}

/**
 * Return the group ID for the current node
 *
 * @return array
 */
function _toolkits_pages_get_group($node) {
  $query = db_select('og');
  $query
    ->fields('og', array('gid', 'etid'))
    ->condition('og.etid', $node->nid, '=');
  return $query->execute()
    ->fetchAssoc();
}

/**
 * Return the node for the current page
 */
function _toolkits_pages_get_node() {
  global $toolkits_original_q;

  $node_path = drupal_lookup_path('source', arg(1, $_SERVER['REQUEST_URI']) .'/'. arg(2, $_SERVER['REQUEST_URI']));
  $node = menu_get_object('node', 1, $node_path);
  if ($node) {
    if (!isset($toolkits_original_q)) {
      $toolkits_original_q = $_GET['q'];
    } // if
    $_GET['q'] = $node_path;
  } // if

  return $node;

}

/**
 * Implements hook_node_view().
 */
function toolkits_pages_node_view($node, $view_mode, $langcode) {

  if ($view_mode == 'full') {

    if ($node->type == 'webform') {
      _toolkits_pages_get_node();
    } // if
    elseif ($node->type == 'toolkit_resource') {
      _toolkits_pages_get_node();
    } // elseif

  } // if

} // toolkits_pages_node_view

/**
 * Implements hook_token_info().
 */
function toolkits_pages_token_info() {

  $info['tokens']['node']['group-title'] = array(
    'name' => t('Group Title'),
    'description' => t('The title of the first group.'),
  );

  return $info;

} // toolkits_pages_token_info

/**
 * Implements hook_tokens().
 */
function toolkits_pages_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();

  if ($type == 'node') {
    foreach ($tokens as $name => $original) {
      if ($name == 'group-title') {

        $node = $data['node'];
        $gid = og_get_entity_groups('node', $node);

        if (!$gid && isset($node->group_audience[$node->language][0]['gid'])) {
          $gid = $node->group_audience[$node->language][0]['gid'];
        } // if

        if ($gid) {
          $group = og_load($gid);
          if ($group) {
            $group_node = node_load($group->etid);
            $replacements[$original] = check_plain($group_node->title);
          } // if
        } // if

      } // if
    } // foreach
  } // if

  return $replacements;

} // toolkits_pages_tokens

/**
 * Helper function. Removed page from book if 'none' is selected for book.
 */
function _toolkits_pages_check_book(&$form, $form_state) {
  if ($form_state['values']['book']['bid'] == 0 && $form_state['values']['book']['original_bid'] != 0) {
    $form['#node']->book['bid'] = $form_state['values']['book']['original_bid'];
    module_load_include('inc', 'book', 'book.pages');
    book_remove_form_submit($form, $form_state);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function toolkits_pages_preprocess_page($vars) {
  $og_context = og_context();
  if (!empty($og_context) && isset($vars['node']->book)) {
    // Tweak the book navigation block a bit
    drupal_add_js(drupal_get_path('module', 'toolkits_pages') . '/js/toolkits_pages.js',
      array(
        'type' => 'file',
        'scope' => 'footer',
        'group' => JS_DEFAULT,
        'defer' => TRUE
      )
    );

    // Add some styling, too
    drupal_add_css(drupal_get_path('module', 'toolkits_pages') . '/toolkits_pages.css',
      array(
        'group' => CSS_DEFAULT,
        'type' => 'file',
        'media' => 'screen',
        'preprocess' => FALSE,
        'weight' => '9999',
      )
    );
  }
}

/**
 * Implements hook_entity_delete().
 * 
 * Finds and deletes nodes associated with a toolkit/group, so there are no orphans.
 */
function toolkits_pages_entity_delete($entity, $type) {
  if ($type == 'node' && $entity->type == 'toolkit') {
    watchdog('toolkits_pages', 'Preparing to delete toolkit ' . $entity->title);
    $result = db_query("SELECT ogm.etid FROM og_membership ogm INNER JOIN og ON ogm.gid = og.gid WHERE og.etid = :etid AND ogm.entity_type = 'node'", array(':etid' => $entity->nid));
    foreach ($result as $record) {
      $node = node_load($record->etid);
      node_delete($node->nid);
      $type = ucwords(str_replace('_', ' ', $node->type));
      drupal_set_message(t('@type @title  has been deleted.', array('@type' => $type, '@title' => $node->title)));
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter() for node_delete_confirm().
 *
 * Alters the confirm form for a single node deletion.
 *
 * @see node_delete_confirm()
 */
function toolkits_pages_form_node_delete_confirm_alter(&$form, $form_state) {
  $node = node_load($form['nid']['#value']);

  if (isset($node->book) && $node->book['has_children'] && $node->type == 'toolkit') {
    // Reusing book_warning so we don't end up with 2 conficting warnings
    $form['book_warning']['#markup'] = '<p>' . t('%title is a Toolkit, is part of a book outline, and has associated child pages. If you proceed with deletion, the child and associated resource pages will be deleted automatically.', array('%title' => $node->title)) . '</p>';
  }
}
